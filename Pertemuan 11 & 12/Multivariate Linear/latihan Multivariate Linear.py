# -*- coding: utf-8 -*-
"""latihan26.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jB4F4ISucudiR7fMbCTTRT4mVRJk2caI
"""

# Nama     : Febilah Purtin
# NIM      : A11.2022.14209
# Kelompok : A11.4410

# =============================
# ***Universitas Dian Nuswantoro***

# Masukkan Load Librarynya terlebih dahulu
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

# Load Data CSV yang dipakai
# Nama dataframe kita adalah df yang berisi data dari kc_house_data.csv.
# Features yang digunakan adalah 'bedrooms','bathrooms','sqft_living','grade','price' dan 'yr_built'
df = pd.read_csv('kc_house_data.csv', usecols=['bedrooms', 'bathrooms', 'sqft_living', 'grade', 'price', 'yr_built'])

# Menampilkan Data
# Melihat 5 baris teratas dari data
# Independent variabel(x) adalah bedrooms, bathrooms, sqft_living, grade, yr_built
# Dependent variabel(y) adalah price
df.head()

# Mengetahui berapa banyak kolom yang digunakan
# Mengetahui jumlah kolom dan baris dari data
# Data kita mempunya 6 kolom (features) dengan 21613 baris
df.shape

# Melihat informasi data kita mulai dari jumlah data, tipe data, memory yang digunakan dll.
# Dapat dilihat bahwa seluruh data sudah di dalam bentuk numerik
df.info()

# Melihat Statisticalnya
# Melihat statistical description dari data mulai dari mean, kuartil, standard deviation dll
df.describe()

# Mrubah tipe data dari bathrooms yang semula float menjadi int
df['bathrooms'] = df['bathrooms'].astype('int')

# Mengganti nilai 33 menjadi 3
df['bedrooms'] = df['bedrooms'].replace(33,3)

# Menghandle Value yang hilang
# Mencari dan menangani missing values
# Ternyata data kita tidak ada missing values
df.isnull().sum()

# Melakukan EDA (Explorarty Data Analisi)
df.head()

# Univariate analysis bedrooms
# Melihat distribusi dari bedrooms
f = plt.figure(figsize=(12,4))

f.add_subplot(1,2,1)
sns.countplot(df['bedrooms'])

f.add_subplot(1,2,2)
plt.boxplot(df['bedrooms'])
plt.show()

# Univariate analysis bathrooms
# Melihat distribusi dari bathrooms
f = plt.figure(figsize=(12,4))

f.add_subplot(1,2,1)
sns.countplot(df['bathrooms'])

f.add_subplot(1,2,2)
plt.boxplot(df['bathrooms'])
plt.show()

# Univariate analysis sqft_living
# Melihat distribusi dari sqft_living
f = plt.figure(figsize=(12,4))

f.add_subplot(1,2,1)
df['sqft_living'].plot(kind='kde')

f.add_subplot(1,2,2)
plt.boxplot(df['sqft_living'])
plt.show()

# Univariate analysis grade
# Melihat distribusi dari grade
f = plt.figure(figsize=(12,4))

f.add_subplot(1,2,1)
sns.countplot(df['grade'])

f.add_subplot(1,2,2)
plt.boxplot(df['grade'])
plt.show()

# Univariate analysis yr_built
# Melihat distribusi dari yr_built
f = plt.figure(figsize=(20,8))

f.add_subplot(1,2,1)
sns.countplot(df['yr_built'])

f.add_subplot(1,2,2)
plt.boxplot(df['yr_built'])
plt.show()

# Bivariate analysis antara independent variable dan dependent variable
# Melihat hubungan antara independent dan dependent
# Menggunakan pairplot
plt.figure(figsize=(10,8))
sns.pairplot(data=df, x_vars=['bedrooms', 'bathrooms', 'sqft_living', 'grade', 'yr_built'], y_vars=['price'], size=5, aspect=0.75)
plt.show()

# Mengetahui nilai korelasi dari independent variable dan dependent variable
df.corr().style.background_gradient().format("{:.2f}")

# Melakukan Modelling
# Recall data kita
df.head()

# Pertama, buat variabel x dan y
x = df.drop(columns='price')
y = df['price']

# Kedua, kita split data kita menjadi training and testing dengan porsi 80:20
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=4)

# Cek shape dari data training dan testing
print(x_train.shape)
print(y_train.shape)
print(x_test.shape)
print(y_test.shape)

# Ketiga, kita bikin object linear regresi
lin_reg = LinearRegression()

# Keempat, train the model menggunakan training data yang sudah displit
lin_reg.fit(x_train, y_train)

# Kelima, cari tau nilai slope/koefisien (m) dan intercept (b)
print(lin_reg.coef_)
print(lin_reg.intercept_)

# Kita coba buat kedalam dataframe agar kebih rapi
coef_dict = {
    'features': x.columns,
    'coef_value':lin_reg.coef_
}
coef = pd.DataFrame(coef_dict, columns=['features', 'coef_value'])
coef

y_pred = lin_reg.predict(x_test)

# Keenam, kita cari tahu accuracy score dari model kita menggunakan testing data yang sudah displit
lin_reg.score(x_test, y_test)

# Prediksi harga rumah idaman Joko
lin_reg.predict([[3,2,1800,7,1990]])