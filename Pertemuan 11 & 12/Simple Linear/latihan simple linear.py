# -*- coding: utf-8 -*-
"""latihan27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JUNVEav1VwrN_AB5p46XvKXSG7BDudGv
"""

# Nama     : Febilah Purtin
# NIM      : A11.2022.14209
# Kelompok : A11.4410

# =============================
# ***Universitas Dian Nuswantoro***

# Melakukan Load Library
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split

# Memasukkan Dataset
# Nama dataframe kita adalah df yang berisi data dari data.csv
# Hanya menggunakan kolom horsepower dan price
df = pd.read_csv('data.csv', usecols=['horsepower', 'price'])

# Melihat 5 baris teratas dari data
# Independent variabel(x) adalah horsepower
# Dependent variabel(y) adalah price
df.head()

# Mengetahui jumlah kolom dan baris dari data
# Data kita mempunya 2 kolom dengan 200 baris
df.shape

# Melihat Info Data
# Melihat informasi data kita mulai dari jumlah data, tipe data, memory yang digunakan dll.
df.info()

# Mendiskripsikan Data
# Melihat statistical description dari data mulai dari mean, kuartil, standard deviation dll
df.describe()

# Mencari dan menangani missing values
# Ternyata data kita tidak ada missing values
df.isnull().sum()

# Melakukan EDA
# Univariate analysis horsepower
# Melihat distribusi dari horsepower
f = plt.figure(figsize=(12,4))

f.add_subplot(1,2,1)
df['horsepower'].plot(kind='kde')

f.add_subplot(1,2,2)
plt.boxplot(df['horsepower'])
plt.show()

# Melakukan EDA
# Univariate analysis price
# Melihat distribusi dari price
f = plt.figure(figsize=(12,4))

f.add_subplot(1,2,1)
df['price'].plot(kind='kde', c='g')

f.add_subplot(1,2,2)
plt.boxplot(df['price'])
plt.show()

# Bivariate analysis horsepower dan price
# Menggunakan scatter plot
plt.scatter(df['horsepower'], df['price'])
plt.xlabel('Horsepower')
plt.ylabel('Price')
plt.title('Scatter Plot Horsepower vs Price')
plt.show()

# Mengetahui nilai korelasi dari horsepower dan price
# Nilai korelasinya adalah 0.81 termasuk kategori sangat tinggi
df.corr()

# Recall data kita
df.head()

# Pertama, buat variabel x dan y
x = df['horsepower'].values.reshape(-1,1)
y = df['price'].values.reshape(-1,1)

# Kedua, kita split data kita menjadi training and testing dengan porsi 80:20
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

# Ketiga, kita bikin object linear regresi
lin_reg = LinearRegression()

# Keempat, train the model menggunakan training data yang sudah displit
lin_reg.fit(x_train, y_train)

# Kelima, cari tau nilai slope/koefisien (m) dan intercept (b)
print(lin_reg.coef_)
print(lin_reg.intercept_)

# Keenam, kita cari tahu accuracy score dari model kita menggunakan testing data yang sudah displit
lin_reg.score(x_test, y_test)

# Ketujuh, visualisasi aktual vs prediksi menggunakan data testing
# Garis merah merupakan garis regresi dari persamaan yang kita dapat tadi
y_prediksi = lin_reg.predict(x_test)
plt.scatter(x_test, y_test)
plt.plot(x_test, y_prediksi, c='r')
plt.xlabel('Horsepower')
plt.ylabel('Price')
plt.title('Plot Horsepower vs Price')

# Prediksi harga mobil dengan horsepower 100
lin_reg.predict([[100]])

# Prediksi harga mobil dengan horsepower 150
lin_reg.predict([[150]])

# Prediksi harga mobil dengan horsepower 200
lin_reg.predict([[200]])